<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration SYSTEM "http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
<!-- <!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd"> -->
<!-- log4j.dtd를 웹주소로 변경(안해도 동작에 문제는 없음) -->
	
	<!--
		logger > root > appender 순의 계층 구조 
	 -->
	
	<!-- Appenders -->
	<!-- log를 찍을 출력 객체를 가리킴 -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %l - %m%n" />
		</layout>
	</appender>
	
	<!-- 로깅 기록들을 매일 한파일 씩 출력해주는 Appender -->
	<appender name="fileLogger" class="org.apache.log4j.DailyRollingFileAppender">
		<param name="file" value="${catalina.base}/logs/hello-spring/hello-spring.log" />
		<param name="append" value="true" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss}]%-5p: %l - %m%n" />
		</layout>
	</appender>
	
	<appender name="loginLogger" class="org.apache.log4j.DailyRollingFileAppender">
		<param name="file" value="${catalina.base}/logs/hello-spring/logins/login-logger.log" />
		<param name="append" value="true" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss}]%-5p: %m%n" />
		</layout>
	</appender>
	
	<!--
	* -[숫자] 지정은 문자열 자릿수 지정 나머지는 공백으로 표기
	* %c : 카테고리명(logger이름)을 표시
		* 카테고리명이 hello.world.logger일때, %c{2}는 world.logger를 출력
	* %C : 클래스명을 표시함.	
		* 풀 클래스 명이 com.kh.logger일때, %C{2}는 kh.logger를 출력
	* %d : 로그 시간을 출력한다. java.text.SimpleDateFormat에서 적절한 출력 포맷을 지정할 수 있다. 
		* %d{HH:mm:ss, SSS}
		* %d{yyyy MMM dd HH:mm:ss, SSS}
		* %d{ABSOLUTE} 
		* %d{DATE} 
		* %d{ISO8601}
	* %F : 파일명을 출력. 로그시 수행한 메소드, 라인번호가 함께 출력된다.
	* %l : 로깅이 발생한 caller의 위치정보.메소드명 (자바파일명:라인번호) - 링크제공
	* %L : 라인 번호만 출력한다(링크없음)
	* %m : 로그로 전달된 메시지를 출력한다.
	* %M : 로그를 수행한 메소드명을 출력한다. 
	* %n : 플랫폼 종속적인 개행문자가 출력. rn 또는 n
	* %p : 로그 이벤트명등의 priority 가 출력(debug, info, warn, error, fatal )
	* %r : 로그 처리시간 (milliseconds)
	* %t : 로그이벤트가 발생된 쓰레드의 이름을 출력
	* %% : % 표시를 출력. escaping
	* %r : 어플리케이션 시작 이후 부터 로깅이 발생한 시점의 시간(milliseconds)
	* %X : 로깅이 발생한 thread와 관련된 MDC(mapped diagnostic context)를 출력합니다. %X{key} 형태. 
	 -->
	 
    <!-- #10.2.log4jdbc-remix 로그 출력 appender 추가 -->
	<appender name="sqlLogger" class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %m%n" />
		</layout>
	</appender>
    <!-- #10.3.log4jdbc-remix 관련 logger 시작 -->
	<!-- Query Loggers  -->
	<!-- additivity를 "false"로 하고 appender와 바로 연결시킬 수 있다. -->
	<logger name="jdbc.sqlonly" additivity="false">
		<level value="INFO" />
		<appender-ref ref="sqlLogger"/>
	</logger>
	<logger name="jdbc.resultsettable" additivity="false">
		<level value="INFO" />
		<appender-ref ref="sqlLogger"/>
	</logger>
	
	<!-- Application Loggers -->
	<!-- logger태그의 패키지들의 로그는 Root Logger로 전파된다. (Logger 속성 additivity가 "true"인 경우) -->
	<logger name="com.kh.spring">
		<level value="debug" />
	</logger>
	
	<logger name="com.kh.spring.common.aop" additivity="false">
		<level value="info"/>
		<appender-ref ref="loginLogger"/>
	</logger>
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>

	<!-- Root Logger -->
	<!-- Root Logger는 Logger들을 Appender와 연결해준다(appender-ref태그로 지정) -->
	<root>
		<priority value="warn" />
		<appender-ref ref="console" />
		<appender-ref ref="fileLogger" />
	</root>
	
</log4j:configuration>
